create table Salesman
(Salesman_id "int" NOT NULL primary key,
Salesman_name varchar(20) not null,
Salesman_city varchar(20) not null,
Salesman_commission decimal(8,3)  NOT NULL );

create table Customer1
(Customer_id "int" NOT NULL primary key,
Customer_name varchar(20) not null,
Customer_city varchar(20) not null,
Customer_grade "int" not null,
Salesman_id "int"  NOT NULL references Salesman(Salesman_id) );

create table Orders1
(Order_no "int" NOT NULL primary key,
Purch_amount "int" not null,
Order_date date not null,
Customer_id "int" references Customer1(Customer_id) ,
Salesman_id "int" references Salesman(Salesman_id) );

insert into Salesman values(11,'Pranav','Karwar',0.10);
insert into Salesman values(24,'Prasanna','Bengalore',0.12);
insert into Salesman values(39,'Prajwal','Kodagu',0.16);
insert into Salesman values(44,'Pooja','Hubli',0.05);
insert into Salesman values(15,'Prokta','Mysore',0.15);

insert into Customer1 values(101,'Bhargav','Mysore',1,15);
insert into Customer1 values(206,'Ramya','Bengalore',3,24);
insert into Customer1 values(225,'Rajesh','Hubli',2,39);
insert into Customer1 values(324,'Ravi','Mangalore',5,44);
insert into Customer1 values(456,'Rajdeep','Belagavi',3,15);
insert into Customer1 values(501,'Raghu','Dharavad',4,39);
insert into Customer1 values(300,'Bhavya','Bengalore',1,15);

insert into Orders1 values(5,10000,'2020-03-25',101,11);
insert into Orders1 values(10,5000,'2020-03-25',456,15);
insert into Orders1 values(7,9500,'2020-04-30',225,44);
insert into Orders1 values(11,8700,'2020-07-07',324,24);
insert into Orders1 values(17,1500,'2020-07-07',206,39);

SELECT * FROM [dbo].[Customer1]
SELECT * FROM [dbo].[Orders1]
SELECT * FROM [dbo].[Salesman]

--1)write a SQL query to find the salesperson and customer who reside in the same city. Return Salesman, cust_name and city
SELECT [dbo].[Salesman].[Salesman_name],
	   [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city]
	   FROM [dbo].[Salesman] INNER JOIN [dbo].[Customer1]
	   ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]
	   WHERE [dbo].[Customer1].[Customer_city] = [dbo].[Salesman].[Salesman_city]

--2)write a SQL query to find those orders where the order amount exists between 500 and 2000. Return ord_no, purch_amt, cust_name, city
SELECT [dbo].[Orders1].[Order_no],
	   [dbo].[Orders1].[Purch_amount],
	   [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city]
	   FROM [dbo].[Orders1] INNER JOIN [dbo].[Customer1]
	   ON [dbo].[Orders1].[Customer_id] = [dbo].[Customer1].[Customer_id]
	   WHERE [dbo].[Orders1].[Purch_amount] between 500 and 2000

--3)write a SQL query to find the salesperson(s) and the customer(s) he represents. Return Customer Name, city, Salesman, commissio
SELECT [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Salesman].[Salesman_name],
	   [dbo].[Salesman].[Salesman_commission]
	   FROM [dbo].[Salesman] INNER JOIN [dbo].[Customer1]
	   ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]

--4)write a SQL query to find salespeople who received commissions of more than 12 percent from the company. Return Customer Name, customer city, Salesman, commission.
SELECT [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Salesman].[Salesman_name],
	   [dbo].[Salesman].[Salesman_commission]
	   FROM [dbo].[Salesman] INNER JOIN [dbo].[Customer1]
	   ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]
	   WHERE [dbo].[Salesman].[Salesman_commission] > 0.12

--5)write a SQL query to locate those salespeople who do not live in the same city where their customers live and have received a commission of more than 12% from the company. Return Customer Name, customer city, Salesman, salesman city, commission
SELECT [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Salesman].[Salesman_name],
	   [dbo].[Salesman].[Salesman_city],
	   [dbo].[Salesman].[Salesman_commission]
	   FROM [dbo].[Salesman] INNER JOIN [dbo].[Customer1]
	   ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]
	   WHERE [dbo].[Salesman].[Salesman_commission] > 0.12
	   AND [dbo].[Salesman].[Salesman_city] != [dbo].[Customer1].[Customer_city]

--6)write a SQL query to find the details of an order. Return ord_no, ord_date, purch_amt, Customer Name, grade, Salesman, commission
SELECT [dbo].[Orders1].[Order_no],
	   [dbo].[Orders1].[Order_date],
	   [dbo].[Orders1].[Purch_amount],
	   [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_grade],
	   [dbo].[Salesman].[Salesman_name],
	   [dbo].[Salesman].[Salesman_commission]
	   FROM [dbo].[Salesman]
	   INNER JOIN [dbo].[Customer1] ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]
	   INNER JOIN [dbo].[Orders1] ON [dbo].[Orders1].[Customer_id] = [dbo].[Customer1].[Customer_id]

--7)Write a SQL statement to join the tables salesman, customer and orders so that the same column of each table appears once and only the relational rows are returned.
SELECT [dbo].[Salesman].*,
	   [dbo].[Customer1].[Customer_id],
	   [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Customer1].[Customer_grade],
	   [dbo].[Orders1].[Order_no],
	   [dbo].[Orders1].[Purch_amount],
	   [dbo].[Orders1].[Order_date]
	   FROM [dbo].[Salesman]
	   INNER JOIN [dbo].[Customer1] ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]
	   INNER JOIN [dbo].[Orders1] ON [dbo].[Orders1].[Customer_id] = [dbo].[Customer1].[Customer_id]
	   --SELECT * FROM Salesman JOIN Customer1 USING (Salesman_id) JOIN Orders1 USING (Customer_id);

--8)write a SQL query to display the customer name, customer city, grade, salesman, salesman city. The results should be sorted by ascending customer_id.
SELECT [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Customer1].[Customer_grade],
	   [dbo].[Salesman].[Salesman_name],
	   [dbo].[Salesman].[Salesman_city]
	   FROM [dbo].[Salesman] 
	   INNER JOIN [dbo].[Customer1] ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]
	   ORDER BY [dbo].[Customer1].[Customer_id]

--9)write a SQL query to find those customers with a grade less than 300. Return cust_name, customer city, grade, Salesman, salesmancity. The result should be ordered by ascending customer_id.
SELECT [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Customer1].[Customer_grade],
	   [dbo].[Salesman].[Salesman_name],
	   [dbo].[Salesman].[Salesman_city]
	   FROM [dbo].[Salesman] 
	   INNER JOIN [dbo].[Customer1] ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]
	   WHERE [dbo].[Customer1].[Customer_grade] < 300
	   ORDER BY [dbo].[Customer1].[Customer_id]

--10) Write a SQL statement to make a report with customer name, city, order number, order date, and order amount in ascending order according to the order date to determine whether any of the existing customers have placed an order or not
SELECT [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Orders1].[Order_no],
	   [dbo].[Orders1].[Order_date],
	   [dbo].[Orders1].[Purch_amount],
	   CASE
			WHEN   [dbo].[Orders1].[Order_no] is null THEN 'Order Not placed'
			ELSE 'Order Placed'
	   END as Order_Status
	   FROM [dbo].[Customer1]
	   LEFT OUTER JOIN [dbo].[Orders1] ON [dbo].[Orders1].[Customer_id] = [dbo].[Customer1].[Customer_id]
	   ORDER BY [dbo].[Orders1].[Order_date]

--11)Write a SQL statement to generate a report with customer name, city, order number, order date, order amount, salesperson name, and commission to determine if any of the existing customers have not placed orders or if they have placed orders through their salesman or by themselves
SELECT [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Orders1].[Order_no],
	   [dbo].[Orders1].[Order_date],
	   [dbo].[Orders1].[Purch_amount],
	   [dbo].[Salesman].[Salesman_name],
	   [dbo].[Salesman].[Salesman_commission],
	   CASE
			WHEN   [dbo].[Orders1].[Order_no] is null THEN 'Order Not placed'
			ELSE 'Order Placed'
	   END as Order_Status
	   FROM [dbo].[Customer1]
	   LEFT OUTER JOIN [dbo].[Orders1] ON [dbo].[Orders1].[Customer_id] = [dbo].[Customer1].[Customer_id]
	   LEFT OUTER JOIN [dbo].[Salesman] ON [dbo].[Orders1].[Salesman_id] = [dbo].[Salesman].[Salesman_id]
	   ORDER BY [dbo].[Orders1].[Order_date]

--12)Write a SQL statement to generate a list in ascending order of salespersons who work either for one or more customers or have not yet joined any of the customers
SELECT [dbo].[Salesman].[Salesman_name],
	   count([dbo].[Customer1].[Customer_id]) AS TOTAL_CUSTOMERS 
	   FROM [dbo].[Salesman]
	   LEFT OUTER JOIN [dbo].[Customer1] ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]
	   GROUP BY [dbo].[Salesman].[Salesman_name]
	   ORDER BY [dbo].[Salesman].[Salesman_name]

--13)write a SQL query to list all salespersons along with customer name, city, grade, order number, date, and amount.
SELECT [dbo].[Salesman].*,
	   [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Customer1].[Customer_grade],
	   [dbo].[Orders1].[Order_no],
	   [dbo].[Orders1].[Purch_amount],
	   [dbo].[Orders1].[Order_date]
	   FROM [dbo].[Salesman]
	   LEFT OUTER JOIN [dbo].[Customer1] ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]
	   LEFT OUTER JOIN [dbo].[Orders1] ON [dbo].[Orders1].[Customer_id] = [dbo].[Customer1].[Customer_id]

--14)Write a SQL statement to make a list for the salesmen who either work for one or more customers or yet to join any of the customers. The customer may have placed, either one or more orders on or above order amount 2000 and must have a grade, or he may not have placed any order to the associated supplier.
SELECT [dbo].[Salesman].*,
	   [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Customer1].[Customer_grade],
	   [dbo].[Orders1].[Order_no],
	   [dbo].[Orders1].[Purch_amount],
	   [dbo].[Orders1].[Order_date]
	   FROM [dbo].[Salesman]
	   LEFT OUTER JOIN [dbo].[Customer1] ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]
	   LEFT OUTER JOIN [dbo].[Orders1] ON [dbo].[Orders1].[Customer_id] = [dbo].[Customer1].[Customer_id]
	   WHERE ([dbo].[Orders1].[Purch_amount] > 2000 
	   AND [dbo].[Customer1].[Customer_grade] IS NOT NULL)
	   OR ([dbo].[Orders1].[Purch_amount] IS NULL AND [dbo].[Customer1].[Customer_grade] IS NOT NULL)

--15)Write a SQL statement to generate a list of all the salesmen who either work for one or more customers or have yet to join any of them. The customer may have placed one or more orders at or above order amount 2000, and must have a grade, or he may not have placed any orders to the associated supplier.
SELECT [dbo].[Salesman].*,
	   [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Customer1].[Customer_grade],
	   [dbo].[Orders1].[Order_no],
	   [dbo].[Orders1].[Purch_amount],
	   [dbo].[Orders1].[Order_date]
	   FROM [dbo].[Salesman]
	   LEFT OUTER JOIN [dbo].[Customer1] ON [dbo].[Salesman].[Salesman_id] = [dbo].[Customer1].[Salesman_id]
	   LEFT OUTER JOIN [dbo].[Orders1] ON [dbo].[Orders1].[Customer_id] = [dbo].[Customer1].[Customer_id]
	   WHERE ([dbo].[Orders1].[Purch_amount] > 2000 
	   AND [dbo].[Customer1].[Customer_grade] IS NOT NULL)
	   OR ([dbo].[Orders1].[Purch_amount] IS NULL AND [dbo].[Customer1].[Customer_grade] IS NOT NULL)
--16)Write a SQL statement to generate a report with the customer name, city, order no. order date, purchase amount for only those customers on the list who must have a grade and placed one or more orders or which order(s) have been placed by the customer who neither is on the list nor has a grade.
SELECT [dbo].[Customer1].[Customer_name],
	   [dbo].[Customer1].[Customer_city],
	   [dbo].[Orders1].[Order_no],
	   [dbo].[Orders1].[Purch_amount],
	   [dbo].[Orders1].[Order_date]
	   FROM [dbo].[Orders1]
	   LEFT OUTER JOIN [dbo].[Customer1] ON [dbo].[Orders1].[Customer_id] = [dbo].[Customer1].[Customer_id]
	   WHERE [dbo].[Customer1].[Customer_grade] IS NOT NULL

--17)Write a SQL query to combine each row of the salesman table with each row of the customer table
SELECT *
	   FROM [dbo].[Salesman]
	   CROSS JOIN [dbo].[Customer1]

--18)Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for all customers and vice versa for that salesperson who belongs to that city
SELECT *
	   FROM [dbo].[Salesman]
	   CROSS JOIN [dbo].[Customer1]
	   WHERE [dbo].[Customer1].[Customer_city] = [dbo].[Salesman].[Salesman_city]

--19)Write a SQL statement to create a Cartesian product between salesperson and customer, i.e. each salesperson will appear for every customer and vice versa for those salesmen who belong to a city and customers who require a grade
SELECT *
	   FROM [dbo].[Salesman]
	   CROSS JOIN [dbo].[Customer1]
	   WHERE [dbo].[Customer1].[Customer_city] = [dbo].[Salesman].[Salesman_city] 
	   AND [dbo].[Customer1].[Customer_grade] IS NOT NULL

--20)Write a SQL statement to make a Cartesian product between salesman and customer i.e. each salesman will appear for all customers and vice versa for those salesmen who must belong to a city which is not the same as his customer and the customers should have their own grade
SELECT *
	   FROM [dbo].[Salesman]
	   CROSS JOIN [dbo].[Customer1]
	   WHERE [dbo].[Customer1].[Customer_city] != [dbo].[Salesman].[Salesman_city] 
	   AND [dbo].[Customer1].[Customer_grade] IS NOT NULL